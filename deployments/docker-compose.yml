version: "3.9"

services:
  web:
    build:
      context: ../backend
    networks:
      - social_network
    env_file:
      - ../backend/docker-app/env
    restart: unless-stopped
    volumes:
      - ../backend/:/code
    command:
      - run_web
    depends_on:
      - db
      - redis
      - rabbit
      - haproxy
    links:
      - db
      - redis
      - rabbit
      - db-slave-1
      - db-slave-2
      - haproxy
    ports:
      - "8080:8088"

  web-2:
    build:
      context: ../backend
    networks:
      - social_network
    env_file:
      - ../backend/docker-app/env
    restart: unless-stopped
    volumes:
      - ../backend:/code
    command:
      - run_web
    depends_on:
      - db
      - redis
      - rabbit
      - haproxy
    links:
      - db
      - redis
      - rabbit
      - db-slave-1
      - db-slave-2
      - haproxy

  consumers:
    container_name: posts_consumer
    networks:
      - social_network
    build:
      context: ../backend
    env_file:
      - ../backend/docker-app/env
    command:
      - run_consumer
    restart: unless-stopped
    volumes:
      - ../backend/:/code
    depends_on:
      - db
      - redis
      - rabbit
    links:
      - db
      - redis
      - rabbit
  db:
    image: "mysql:8.0"
    restart: unless-stopped
    networks:
      - social_network
    environment:
      MYSQL_ROOT_PASSWORD: root_password
      MYSQL_DATABASE: social_network
      MYSQL_USER: user 
      MYSQL_PASSWORD: user_password
    ports:
      - "3306:3306"
    volumes:
      - ../backend/mysql/mysql.cnf:/etc/mysql/conf.d/my.cnf
    cap_add:
      - SYS_NICE  # CAP_SYS_NICE

  db-slave-1:
    image: "mysql:8.0"
    networks:
      - social_network
    restart: unless-stopped
    command: ["mysqld", "--server-id=2"]
    environment:
      MYSQL_ROOT_PASSWORD: root_password
      MYSQL_DATABASE: social_network
      MYSQL_USER: user
      MYSQL_PASSWORD: user_password
    volumes:
      - ../backend/mysql/mysql_slave.cnf:/etc/mysql/conf.d/my.cnf
    cap_add:
      - SYS_NICE  # CAP_SYS_NICE

  db-slave-2:
    image: "mysql:8.0"
    networks:
      - social_network
    restart: unless-stopped
    command: ["mysqld", "--server-id=3"]
    environment:
      MYSQL_ROOT_PASSWORD: root_password
      MYSQL_DATABASE: social_network
      MYSQL_USER: user
      MYSQL_PASSWORD: user_password
    volumes:
      - ../backend/mysql/mysql_slave.cnf:/etc/mysql/conf.d/my.cnf
    cap_add:
      - SYS_NICE  # CAP_SYS_NICE

  haproxy:
    image: haproxy:2.4
    networks:
      - social_network
    user: root
    hostname: haproxy
    container_name: haproxy-lb
    restart: unless-stopped
    volumes:
      - "../backend/docker-app/haproxy/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg"
    ports:
      - "3307:3306"
      - "8404:8404"
    depends_on:
      - db-slave-2
      - db-slave-1
    links:
      - db-slave-1
      - db-slave-2

  nginx:
    restart: unless-stopped
    networks:
      - social_network
    image: nginx:stable-alpine
    ports:
      - "0.0.0.0:80:80"
    volumes:
      - "../backend/docker-app/nginx/balancing.conf:/etc/nginx/conf.d/default.conf:rw"
    links:
      - web:web
    depends_on:
      - web
      - web-2

  redis:
    restart: unless-stopped
    networks:
      - social_network
    image: redis:latest
    ports:
      - "6379:6379"

  rabbit:
    restart: unless-stopped
    networks:
      - social_network
    image: rabbitmq:3.10.0
    ports:
      - "5672:5672"
      - "15672:15672"
      - "5671:5671"

#   tarantool:
#     image: tarantool/tarantool:1.10.13
#     ports:
#       - "3301:3301"
#       - "3302:3302"
#     volumes:
#       - ../backend/in_memory_db/tarantool/init# .lua:/opt/tarantool/init.lua
#
#   mysql_to_tarantool:
#     restart: unless-stopped
#     # image: avpgenium/mysql-tarantool-replication:latest
#     build:
#       context: ../backend/in_memory_db/mysql-tarantool-replication
#     depends_on:
#       - tarantool
#       - db
#     links:
#       - tarantool
#       - db

  #  ======= chat =============
  chat-api:
    build:
      context: ../chart-service
    restart: unless-stopped
    networks:
      - social_network
    ports:
      - "8088:8088"
    environment:
      DB_HOST: db-shard-1
      DB_NAME: chat
      DB_USER: user
      DB_PASSWORD: user_password
      DB_SHARDS: '[{"host":"db-shard-1","port":3306}, {"host":"db-shard-2", "port":3306}]'
    volumes:
      - ../chart-service:/code
    depends_on:
      - db-shard-1
      - db-shard-2
      - counter_service
    links:
      - db-shard-1
      - db-shard-2
      - counter_service
  db-shard-1:
    image: "mysql:8.0"
    networks:
      - social_network
    environment:
      MYSQL_ROOT_PASSWORD: root_password
      MYSQL_DATABASE: chat
      MYSQL_USER: user
      MYSQL_PASSWORD: user_password
    cap_add:
      - SYS_NICE  # CAP_SYS_NICE
  db-shard-2:
    image: "mysql:8.0"
    networks:
      - social_network
    environment:
      MYSQL_ROOT_PASSWORD: root_password
      MYSQL_DATABASE: chat
      MYSQL_USER: user
      MYSQL_PASSWORD: user_password
    cap_add:
      - SYS_NICE  # CAP_SYS_NICE
  # ============ counter service

  counter_service:
    build:
      context: ../counter-service
    networks:
      - social_network
    ports:
      - "8087:8088"
    environment:
      - DATABASE_URL=postgresql+asyncpg://counter_service_db/counter?user=username&password=password
    restart: on-failure
    command:
      - runserver
    # volumes:
    #   - ../counter-service/:/code
    depends_on:
      - counter_service_db

  counter_service_db:
    image: postgres:14.1-alpine
    networks:
      - social_network
    environment:
      - POSTGRES_USER=username
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=counter
      - POSTGRES_PORT=5432
    ports:
      - "5432:5432"

  # ============ jaeger
  jaeger-all-in-one:
    image: jaegertracing/all-in-one
    networks:
      - social_network
    environment:
      - JAEGER_DISABLED=true
    ports:
      - 16686:16686
      - 6831:6831/udp
      - 14268
      - 14250

networks:
  social_network: